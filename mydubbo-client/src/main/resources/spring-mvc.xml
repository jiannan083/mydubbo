<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- aspectj aop启用CGliB代理,定义在哪个文件，就对哪个文件scan的类生效 -->
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>
    <!-- 扫描controller -->
	<!-- <context:component-scan base-package="cn.wangjiannan.controller" /> -->
	<context:component-scan base-package="cn.wangjiannan" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
    <!-- 
    	  支持@RequestMapping;
    	  支持@RequestBody;
	 	  支持@ResponseBody,将数据自动转成JSON格式字符串给客户端JavaScript返回.
	-->    
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
  		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 配置结果页面 前缀和后缀 --> 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 前提：将DispatcherServlet的请求映射配置为"/" -->		
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->		
	<!-- 静态资源文件（js css htm html jpg jepg png bmp） -->		
	<!-- 方法二：<mvc:resources /> -->		
	<mvc:default-servlet-handler/>
	
	<!-- hibernate-Validator -->
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 配置文件名称,不包括后缀  -->
                <value>classpath:validationMessageSource</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <!-- 资源文件编码格式 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="60"/>
    </bean>
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <mvc:annotation-driven validator="validator" /> 
    <!-- 方法级别的验证 -->
    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
	    <!-- 可以引用自己的 validator 配置，在本文中（下面）可以找到 validator 的参考配置，如果不指定则系统使用默认的 -->
	    <property name="validator" ref="validator"/>
    </bean>
</beans>  